--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: It is a required parameter.
  - !ruby/struct:SM::Flow::P 
    body: "@return [String] Text domain"
  name: domain
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "@return [Bool] @see #enable_description? For details."
  name: enable_description
  rw: W
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "@return [Bool] @see #enable_po? For details."
  name: enable_po
  rw: W
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: It is a required parameter.
  - !ruby/struct:SM::Flow::P 
    body: "@return [Array&lt;String&gt;] Files that have messages."
  name: files
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: It is a required parameter.
  - !ruby/struct:SM::Flow::P 
    body: "@return [Array&lt;String&gt;] Supported locales. It is filled from"
  - !ruby/struct:SM::Flow::VERB 
    body: "  {#po_base_directory} by default.\n"
  name: locales
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "@return [String] Base directory that has generated MOs. MOs"
  - !ruby/struct:SM::Flow::VERB 
    body: "  are generated into\n  `#{mo_base_directory}/#{locale}/LC_MESSAGES/#{domain}.mo`.\n"
  name: mo_base_directory
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "@return [Array&lt;String&gt;] Command line options for filtering PO. @see GetText::Tools::MsgCat @see `rmsgcat --help` @since 3.1.3"
  name: msgcat_options
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "@return [Array&lt;String&gt;] Command line options for creating PO from POT. @see GetText::Tools::MsgInit @see `rmsginit --help`"
  name: msginit_options
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "@return [Array&lt;String&gt;] Command line options for merging PO with the"
  - !ruby/struct:SM::Flow::VERB 
    body: "  latest POT.\n"
  - !ruby/struct:SM::Flow::P 
    body: "@see GetText::Tools::MsgMerge @see `rmsgmerge --help`"
  name: msgmerge_options
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: It is useful when you have multiple domains. You can define tasks for each domains by using different namespace prefix.
  - !ruby/struct:SM::Flow::P 
    body: It is `nil` by default. It means that tasks are defined at top level.
  - !ruby/struct:SM::Flow::P 
    body: "TODO: example"
  - !ruby/struct:SM::Flow::P 
    body: "@return [String] Namespace prefix for tasks defined by this class."
  name: namespace_prefix
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "@return [String, nil] Package name for messages."
  name: package_name
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "@return [String, nil] Package version for messages."
  name: package_version
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  name: po_base_directory
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: It is used to custom how to create POT file. The object must have `call` method. The method must accept one argument. The argument
  - !ruby/struct:SM::Flow::VERB 
    body: " is a `Pathname` object that represents POT file path.\n"
  - !ruby/struct:SM::Flow::P 
    body: "@example"
  - !ruby/struct:SM::Flow::VERB 
    body: "  GetText::Tools::Task.define do |task|\n    task.pot_creator = lambda do |pot_file_path|\n      pot_file_path.open(&quot;w&quot;) do |pot_file|\n        pot_file &lt;&lt; &lt;&lt;-POT\n  msgid &quot;Hello&quot;\n  msgstr &quot;&quot;\n        POT\n      end\n    end\n  end\n"
  - !ruby/struct:SM::Flow::P 
    body: "@return [Proc]"
  name: pot_creator
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "@return [Gem::Specification, nil] Package information associated"
  - !ruby/struct:SM::Flow::VERB 
    body: "  with the task.\n"
  name: spec
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "@return [Array&lt;String&gt;] Command line options for extracting messages"
  - !ruby/struct:SM::Flow::VERB 
    body: "  from sources.\n"
  - !ruby/struct:SM::Flow::P 
    body: "@see GetText::Tools::XGetText @see `rxgettext --help`"
  name: xgettext_options
  rw: RW
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: define
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
constants: []

full_name: GetText::Tools::Task
includes: 
- !ruby/object:RI::IncludedModule 
  name: GetText
- !ruby/object:RI::IncludedModule 
  name: Rake::DSL
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: define
- !ruby/object:RI::MethodSummary 
  name: enable_description?
- !ruby/object:RI::MethodSummary 
  name: enable_po?
- !ruby/object:RI::MethodSummary 
  name: spec=
name: Task
superclass: Object
